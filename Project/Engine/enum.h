#pragma once

enum class ASSET_TYPE
{
	MESH,
	MESH_DATA,
	MATERIAL,
	PREFAB,
	TEXTURE,
	SOUND,
	GRAPHIC_SHADER,
	COMPUTE_SHADER,
	SPRITE,
	FLIPBOOK,
	END,
};
extern const char* ASSET_TYPE_STRING[(UINT)ASSET_TYPE::END];
const char* ToString(ASSET_TYPE _Type);

enum class CB_TYPE
{
	TRANSFORM,
	MATERIAL,
	SPRITE,
	GLOBAL,
	END,
};

enum class COMPONENT_TYPE
{
	TRANSFORM,
	COLLIDER2D,
	COLLIDER3D,
	LIGHT2D,
	LIGHT3D,
	FLIPBOOKCOMPONENT,    // ANIMATOR2D
	ANIMATOR3D,
	FSM,
	RIGIDBODY,
	CAMERA,

	// Render Component
	MESHRENDER,
	TILEMAP,
	PARTICLE_SYSTEM,
	DECAL,
	SKYBOX,
	LANDSCAPE,

	END,

	SCRIPT,
};
extern const char* COMPONENT_TYPE_STRING[(UINT)COMPONENT_TYPE::END];
const char* ToString(COMPONENT_TYPE _Type);

enum class LAYER_TYPE
{
	UI,
	POSTPROCESS,
	FOREGROUND,
	MONSTER_PROJECTTILE,
	PLAYER_PROJECTTILE,
	PLAYERWEAPON,
	PLAYER,
	WEAPON_EFFECT,
	DAMAGE_EFFECT,
	MONSTER,
	LIGHT0,
	LIGHT1,
	LIGHT2,
	LIGHT3,
	ITEMBOX,
	PLATFORM0,
	PLATFORM1,
	LANDMARK0,
	LANDMARK1,
	PLATFORM2,
	PLATFORM3,
	BACKGROUND_DECO,
	BACKGROUND0,
	BACKGROUND1,
	BACKGROUND2,
	BACKGROUND3,
	MAPLIMIT_COLLIDER,
	DEFAULT,

	END = MAX_LAYER,
};
extern const char* LAYER_TYPE_STRING[(UINT)LAYER_TYPE::END];
const char* ToString(LAYER_TYPE _Type);
const char* ToString(int _Index);

enum DIR
{
	RIGHT,
	UP,
	FRONT,
};

enum class UNITVEC_TYPE
{
	LEFT,
	RIGHT,
	UP,
	DOWN,
};

enum class RS_TYPE
{
	CULL_BACK,
	CULL_FRONT,
	CULL_NONE,
	WIRE_FRAME,
	END,
};

enum class DS_TYPE
{
	LESS,
	LESS_EQUAL,

	GREATER,

	NO_TEST,
	NO_TEST_NO_WRITE,

	END,
};

enum class BS_TYPE
{
	DEFAULT,
	ALPHABLEND,
	ONE_ONE,

	END,
};

enum SCALAR_PARAM
{
	INT_0,
	INT_1,
	INT_2,
	INT_3,

	FLOAT_0,
	FLOAT_1,
	FLOAT_2,
	FLOAT_3,

	VEC2_0,
	VEC2_1,
	VEC2_2,
	VEC2_3,

	VEC4_0,
	VEC4_1,
	VEC4_2,
	VEC4_3,

	MAT_0,
	MAT_1,
	MAT_2,
	MAT_3,
};

enum TEX_PARAM
{
	TEX_0,
	TEX_1,
	TEX_2,
	TEX_3,

	TEX_4,
	TEX_5,
	TEX_6,
	TEX_7,

	TEX_8,
	TEX_9,
	TEX_10,
	TEX_11,

	TEX_12,
	TEX_13,
	TEX_14,
	TEX_15,
	
	TEXCUBE_0,
	TEXCUBE_1,

	TEXARR_0,
	TEXARR_1,

	END,
};

enum SHADER_DOMAIN
{
	DOMAIN_OPAQUE,          // 불투명
	DOMAIN_MASKED,          // 투명, 불투명
	DOMAIN_TRANSPARENT,     // 반투명
	DOMAIN_PARTICLE,        // 파티클
	DOMAIN_POSTPROCESS,     // 후처리
	DOMAIN_UI,              // UI

	DOMAIN_DEBUG,           // 디버그
};

enum class DEBUG_SHAPE
{
	RECT,
	CIRCLE,
	LINE,
	CUBE,
	SPHERE,
};

enum TASK_TYPE
{
	// Param_0 : Layer, Param_1 : Object Adress
	CREATE_OBJECT,

	// Param_0 : Delete Object Adress
	DELETE_OBJECT,

	// Param_0 : Next Level State
	CHANGE_LEVELSTATE,

	// Param_0 : Level Adress, Param_1 : Level State
	CHANGE_LEVEL,

	// Param_0 : AssetAddress
	DEL_ASSET,

	LEVEL_CHANGED,
	ASSET_CHANGED,

	ADD_CHILD,
	COMPONENT_ACTIVATE,
	COMPONENT_DEACTIVATE,
};

enum LEVEL_STATE
{
	PLAY,
	PAUSE,
	STOP,
};

enum class LIGHT_TYPE
{
	DIRECTIONAL,
	POINT,
	SPOT,
};